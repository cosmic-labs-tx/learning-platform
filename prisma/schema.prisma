datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  firstName  String
  lastName   String
  phone      String?
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)
  stripeId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role             UserRole?
  password         Password?
  courses          UserCourses?
  lessonProgresses UserLessonProgress[]
  courseProgresses UserCourseProgress[]
  passwordResets   PasswordReset[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Entities
model Course {
  id           String @id @default(cuid())
  priceInCents Int
  strapiId     Int?
  slug         String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users              UserCourses[]
  lessons            Lesson[]
  UserCourseProgress UserCourseProgress?
}

model Lesson {
  id                        String @id @default(cuid())
  strapiId                  Int?
  requiredDurationInSeconds Int?
  slug                      String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course     Course               @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId   String
  progresses UserLessonProgress[]
}

// Relations
model UserCourses {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCourseProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @unique

  durationInSeconds Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLessonProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String @unique

  durationInSeconds Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
