datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  firstName  String?
  lastName   String?
  phone      String?
  role       UserRole @default(USER)
  isActive   Boolean  @default(true)
  isVerified Boolean  @default(false)
  stripeId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  passwordResets   PasswordReset[]
  verification     UserVerification?
  courses          UserCourses?
  lessonProgresses UserLessonProgress[]
  courseProgresses UserCourseProgress[]
  quizProgresses   UserQuizProgress[]
}

model UserVerification {
  id        String   @id @default(cuid())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  expiresAt DateTime

  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Entities
model Course {
  id                  String  @id @default(cuid())
  priceInCents        Int
  strapiId            Int     @unique
  slug                String  @unique
  hasRequiredDuration Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      UserCourses[]
  lessons    Lesson[]
  progresses UserCourseProgress?
}

model Lesson {
  id                        String @id @default(cuid())
  strapiId                  Int    @unique
  requiredDurationInSeconds Int?
  slug                      String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course     Course               @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId   String
  progresses UserLessonProgress[]
}

model Quiz {
  id       String @id @default(cuid())
  strapiId Int    @unique
  slug     String @unique

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  progresses UserQuizProgress?
}

// Relations
model UserCourses {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCourseProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @unique

  durationInSeconds Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLessonProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String @unique

  durationInSeconds Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserQuizProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
